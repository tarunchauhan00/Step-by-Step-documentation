{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Step by Step App Documentation","text":"<p>Welcome to the Step by Step App documentation. Use the menu on the left (or above) to navigate through:</p> <ul> <li>Overview</li> <li>Features</li> <li>Authentication &amp; User Roles</li> <li>How Each Page Works</li> <li>Supabase Schema &amp; Client</li> <li>User Guide</li> <li>Styling &amp; Static Assets</li> </ul>"},{"location":"architecture/","title":"7. High-Level Architecture","text":""},{"location":"architecture/#71-main-components","title":"7.1. Main Components","text":"<ol> <li>Navbar (<code>src/components/Navbar.tsx</code>)  </li> <li>Present on all private pages.  </li> <li> <p>Links: </p> <ul> <li>Processes </li> <li>Add Process </li> <li>Form Builder </li> <li>Grant Ownership </li> <li>Reports </li> <li>Reminders </li> <li>Log Out </li> </ul> </li> <li> <p>ProcessCard (<code>src/components/ProcessCard.tsx</code>)  </p> </li> <li>Shows a Process\u2019s title, description snippet, number of steps, created date.  </li> <li> <p>Click \u2192 <code>/process/:processId/steps</code>.</p> </li> <li> <p>StepCard (<code>src/components/StepCard.tsx</code>)  </p> </li> <li>Displays Step title, due date, assigned doer, form link icon, status.  </li> <li> <p>Click \u2192 edit or view that Step.</p> </li> <li> <p>PrivateRoute (<code>src/components/PrivateRoute.tsx</code>)  </p> </li> <li>Guards any route that requires a logged-in user.</li> </ol>"},{"location":"architecture/#72-pages-routes","title":"7.2. Pages &amp; Routes","text":"<p>In <code>src/App.tsx</code>, you\u2019ll find routes like:</p> <p>```tsx  </p>"},{"location":"authentication-roles/","title":"Authentication & User Roles","text":""},{"location":"authentication-roles/#3-authentication-user-roles","title":"3. Authentication &amp; User Roles","text":""},{"location":"authentication-roles/#31-authscreen-login-sign-up","title":"3.1. AuthScreen (Login / Sign-up)","text":"<ol> <li>If no valid JWT in local storage, redirect here.  </li> <li>Offers \u201cLog In\u201d and \u201cSign Up.\u201d  </li> <li>Uses Supabase Auth (email + password).  </li> <li>After successful login/sign-up, redirect to <code>/processes</code>.</li> </ol>"},{"location":"authentication-roles/#32-privateroute-protecting-routes","title":"3.2. PrivateRoute (Protecting Routes)","text":"<ul> <li>Checks if user is authenticated via <code>supabase.auth.getUser()</code>.  </li> <li>If not authenticated, redirect to <code>/auth</code>; otherwise, render the child component.  </li> <li>Wraps all routes except <code>/auth</code> to enforce login.</li> </ul>"},{"location":"building-production/","title":"12. Building for Production","text":"<ol> <li>Set Environment Variables (if using <code>.env</code>):    ```text    REACT_APP_SUPABASE_URL=https://.supabase.co    REACT_APP_SUPABASE_ANON_KEY="},{"location":"features/","title":"2. Features","text":"<ol> <li> <p>Authentication </p> <ul> <li>Owners sign up / log in (via Supabase Auth)  </li> </ul> </li> <li> <p>Process &amp; Step Management </p> <ul> <li> <p>Role-based access control (Owner vs. Doer)</p> </li> <li> <p>Create, list, edit, and delete Processes  </p> </li> <li>Within each Process: create Steps, reorder them, bulk-edit   </li> <li>Assign Doers to specific Steps</li> </ul> </li> <li> <p>Google Forms &amp; Crafty Form Integration </p> <ul> <li>Link Google Form URLs to Steps  </li> <li>\u201cSyncResponses\u201d page automatically fetches responses from linked Google Forms and Crafty Forms</li> </ul> </li> <li> <p>Doer Workflow </p> <ul> <li>\u201cDoerStepList\u201d shows only the Steps assigned to the Doer  </li> <li>\u201cDoerStepDetail\u201d displays the details view for a particular step  </li> </ul> </li> <li> <p>Reminders &amp; Alerts </p> <ul> <li>\u201cReminderSection\u201d sends reminders to Doers for pending or upcoming deadlines  </li> <li>\u201cAlertSection\u201d shows in-app alerts (e.g., new steps assigned, approaching deadline)</li> </ul> </li> <li> <p>Reporting &amp; Analytics </p> <ul> <li>\u201cReportPage\u201d aggregates completion rates, overdue tasks, and user performance</li> </ul> </li> <li> <p>Secure Routing </p> <ul> <li>\u201cPrivateRoute\u201d component ensures only authenticated users can access protected routes</li> </ul> </li> </ol>"},{"location":"how-it-works/","title":"How It Works","text":"<p>This section describes the internal architecture, the main components, and how data flows through the app.</p>"},{"location":"how-it-works/#1-high-level-architecture","title":"1. High-Level Architecture","text":"<ol> <li>Navbar (<code>src/components/Navbar.tsx</code>)  </li> <li> <p>Present on all private pages; contains links to Processes, Add Process, Form Builder, etc.</p> </li> <li> <p>ProcessCard (<code>src/components/ProcessCard.tsx</code>)  </p> </li> <li>Displays a Process\u2019s title, description snippet, number of steps, created date.  </li> <li> <p>Click \u2192 <code>/process/:processId/steps</code>.</p> </li> <li> <p>StepCard (<code>src/components/StepCard.tsx</code>)  </p> </li> <li>Shows Step title, due date, assigned doer, form link.  </li> <li> <p>Click \u2192 edit/view that Step.</p> </li> <li> <p>PrivateRoute (<code>src/components/PrivateRoute.tsx</code>)  </p> </li> <li>Guards every route that requires authentication.</li> </ol> <p>\u2026</p>"},{"location":"how-it-works/#2-supabase-schema-client","title":"2. Supabase Schema &amp; Client","text":"<p>Below is a suggested table structure. The React front-end assumes these tables exist:</p>"},{"location":"how-it-works/#table-users","title":"Table: <code>users</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>email</code> (text)</li> <li><code>full_name</code> (text)</li> <li><code>role</code> (enum: <code>'owner' | 'doer'</code>)</li> <li><code>created_at</code>, <code>updated_at</code></li> </ul>"},{"location":"how-it-works/#table-processes","title":"Table: <code>processes</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>title</code> (text)</li> <li><code>description</code> (text)</li> <li><code>owner_id</code> (UUID, references <code>users.id</code>)</li> <li><code>created_at</code>, <code>updated_at</code></li> </ul>"},{"location":"how-it-works/#table-steps","title":"Table: <code>steps</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>process_id</code> (UUID, references <code>processes.id</code>)</li> <li><code>title</code> (text)</li> <li><code>description</code> (text)</li> <li><code>due_date</code> (date)</li> <li><code>doer_id</code> (UUID, references <code>users.id</code>)</li> <li><code>form_schema_id</code> (UUID, references <code>form_schemas.id</code>, nullable)</li> <li><code>google_form_url</code> (text, nullable)</li> <li><code>status</code> (enum: <code>'pending' | 'completed' | 'overdue'</code>)</li> <li><code>created_at</code>, <code>updated_at</code></li> </ul>"},{"location":"how-it-works/#table-form_schemas","title":"Table: <code>form_schemas</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>name</code> (text)</li> <li><code>description</code> (text)</li> <li><code>schema</code> (JSONB)</li> <li><code>created_at</code>, <code>updated_at</code></li> </ul>"},{"location":"how-it-works/#table-form_responses","title":"Table: <code>form_responses</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>form_id</code> (UUID, references <code>form_schemas.id</code>) OR <code>step_id</code> (UUID, references <code>steps.id</code>)</li> <li><code>doer_id</code> (UUID, references <code>users.id</code>)</li> <li><code>response_data</code> (JSONB)</li> <li><code>submitted_at</code> (timestamp)</li> </ul> <p>\u2026</p>"},{"location":"how-it-works/#3-how-each-page-works","title":"3. How Each Page Works","text":""},{"location":"how-it-works/#31-addprocess-srcpagesaddprocesstsx","title":"3.1. AddProcess (<code>src/pages/AddProcess.tsx</code>)","text":"<ul> <li>Purpose: Create or edit a Process.</li> <li>Inputs: Title, Description, Owner (current user), optional \u201cDefault Deadline.\u201d</li> <li>Flow: </li> <li>If <code>processId</code> exists \u2192 fetch that process and prefill fields.  </li> <li>On \u201cSave\u201d \u2192 <code>supabase.from('processes').insert(...)</code> or <code>update(...)</code>.  </li> <li>Redirect to <code>/processes</code>.</li> </ul>"},{"location":"how-it-works/#32-processlist-srcpagesprocesslisttsx","title":"3.2. ProcessList (<code>src/pages/ProcessList.tsx</code>)","text":"<ul> <li>Purpose: List all Processes owned by current user.</li> <li>Features: Search, filter, \u201cAdd Process.\u201d</li> <li>Click a ProcessCard \u2192 <code>/process/:processId/steps</code>.</li> </ul>"},{"location":"how-it-works/#33-addstep-srcpagesaddsteptsx","title":"3.3. AddStep (<code>src/pages/AddStep.tsx</code>)","text":"<ul> <li>Purpose: Create or edit a Step.</li> <li>Inputs: Step Title, Description, Due Date, Assigned Doer, Google Form URL (optional), Custom Form ID (optional).</li> <li>Flow: </li> <li>If <code>stepId</code> exists \u2192 fetch and prefill.  </li> <li>On \u201cSave\u201d \u2192 <code>supabase.from('steps').insert(...)</code> or <code>update(...)</code>.  </li> <li>Redirect \u2192 <code>/process/:processId/steps</code>.</li> </ul> <p>\u2026 (continue with all \u201cHow Each Page Works\u201d sections)</p>"},{"location":"how-to-use/","title":"How Users Can Use It","text":"<p>These instructions explain, in plain steps, how an Owner/Admin and a Doer/Contributor actually interact with the running application.</p>"},{"location":"how-to-use/#1-owneradmin-workflow","title":"1. Owner/Admin Workflow","text":"<ol> <li>Sign Up / Log In </li> <li>Navigate to <code>http://localhost:3000/auth</code>.  </li> <li>If you haven\u2019t signed up, click Sign Up and fill in email/password. Make sure your Supabase user record has <code>role = owner</code>.  </li> <li> <p>After you sign up, you\u2019ll land on <code>/processes</code> once you log in.</p> </li> <li> <p>View Processes </p> </li> <li>On <code>/processes</code>, you\u2019ll see all the Processes you own.  </li> <li> <p>If there are none yet, an empty-state message appears plus a button Add Process.</p> </li> <li> <p>Create a Process </p> </li> <li>Click Add Process \u2192 fill in \u201cTitle\u201d and \u201cDescription\u201d \u2192 click Save.  </li> <li> <p>You\u2019ll be redirected back to <code>/processes</code>, and your new Process card will show up.</p> </li> <li> <p>Open a Process </p> </li> <li>Click on the Process card \u2192 <code>/process/&lt;processId&gt;/steps</code> (StepCreation).  </li> <li> <p>You\u2019ll see an \u201cAdd Step\u201d button since no steps exist yet.</p> </li> <li> <p>Add Steps </p> </li> <li>Click Add Step \u2192 fill:  <ul> <li>Step Title and Description </li> <li>Due Date (e.g. <code>2025-06-15</code>)  </li> <li>Assign to Doer (choose from dropdown; your Doers must already have signed up as <code>role = doer</code>)  </li> <li>(Optional) Google Form URL if you want them to fill out a Google Form.  </li> <li>(Optional) Custom Form (if you previously created a form under \u201cForms\u201d).  </li> </ul> </li> <li> <p>Click Save. That Step now appears in the list.</p> </li> <li> <p>Bulk Edit Steps </p> </li> <li>If you have multiple steps, click Bulk Edit \u2192 checkboxes appear next to each step.  </li> <li> <p>Select several, choose a new \u201cDue Date\u201d or new \u201cAssigned Doer\u201d at the top, then click Apply. All selected steps update.</p> </li> <li> <p>Create/Manage Custom Forms (optional)  </p> </li> <li>Navigate to \u201cForms\u201d in the Navbar (<code>/forms</code>).  </li> <li>Click Add Form, enter a Form Name and Description, click Next \u2192 \u201cFormBuilder.\u201d  </li> <li>Drag or click to add fields (text, number, date, dropdown).  </li> <li> <p>Give each field a label, mark \u201cRequired\u201d if needed, and click Save. A new <code>formId</code> is generated.</p> </li> <li> <p>Link a Custom Form to a Step </p> </li> <li>When creating or editing a Step, select your custom form from the \u201cCustom Form\u201d dropdown.  </li> <li> <p>Now, when a Doer goes to fill that step, they see the custom form instead of a Google Form.</p> </li> <li> <p>Grant Ownership (optional)  </p> </li> <li>In the Navbar, click Grant Ownership \u2192 a dropdown of other users appears.  </li> <li>Select the new owner (they must already exist with <code>role = owner</code> in Supabase).  </li> <li> <p>Click Transfer. All your processes are now owned by the new user, and you will lose admin rights (unless you repeat the process).</p> </li> <li> <p>Send Reminders </p> <ul> <li>Navigate to Reminders in the Navbar (<code>/reminders</code>).  </li> <li>You\u2019ll see steps that are \u201cDue Soon\u201d or \u201cOverdue.\u201d  </li> <li>Click Send Reminder next to any step\u2014this triggers an email (if your Supabase SMTP is configured) or logs a reminder in the database.</li> </ul> </li> <li> <p>Sync Google Form Responses </p> <ul> <li>After linking a Google Form to a Step, you need to sync responses.  </li> <li>Go to Sync Responses (<code>/sync-responses</code>).  </li> <li>Click Sync All (or sync them individually). You\u2019ll see messages like \u201cFetched 3 new responses for Form ID: abc123.\u201d  </li> <li>Those answers now live in Supabase\u2019s <code>form_responses</code> table.</li> </ul> </li> <li> <p>View Reports </p> <ul> <li>Click Reports in the Navbar (<code>/report</code>).  </li> <li>You\u2019ll see charts/tables for:  </li> <li>Percentage of Steps Completed vs. Pending  </li> <li>Doer-wise completion counts (e.g., John: 15/20, Jane: 12/18)  </li> <li>List of Overdue Steps  </li> <li>Use the filters (by Process, by Doer, by date) to customize what you see.</li> </ul> </li> <li> <p>Log Out </p> <ul> <li>In the Navbar, click Log Out. You\u2019ll return to <code>/auth</code>.</li> </ul> </li> </ol>"},{"location":"how-to-use/#2-doercontributor-workflow","title":"2. Doer/Contributor Workflow","text":"<ol> <li>Sign Up / Log In </li> <li>Go to <code>/auth</code> \u2192 click Sign Up \u2192 fill in email/password \u2192 assign yourself <code>role = doer</code> in Supabase (or have an admin do it).  </li> <li> <p>After logging in, you\u2019ll land on a Doer dashboard or be redirected to <code>/doer/steps</code>.</p> </li> <li> <p>View Assigned Steps </p> </li> <li> <p>On <code>/doer/steps</code>, see a list of all pending/in\u2010progress steps assigned to you, with due dates.</p> </li> <li> <p>Open a Step </p> </li> <li>Click a step \u2192 <code>/doer/step/&lt;stepId&gt;</code>.  </li> <li>If the step has a custom form, you\u2019ll see inputs rendered by <code>FormSchemaRenderer</code>.  </li> <li> <p>If it\u2019s a Google Form, an iframe of the form appears.</p> </li> <li> <p>Fill Out &amp; Submit </p> </li> <li>Complete the required fields and click Submit.  </li> <li>The app saves your answers into <code>form_responses</code>.  </li> <li>That step\u2019s status updates to \u201cCompleted\u201d in Supabase.  </li> <li> <p>You\u2019re redirected to <code>/doer/submission/&lt;submissionId&gt;</code>, where you can view what you submitted.</p> </li> <li> <p>View Past Submissions </p> </li> <li>On <code>/doer/steps</code>, switch to the \u201cCompleted\u201d filter.  </li> <li> <p>Click any completed step to see your submission details (read-only).</p> </li> <li> <p>Receive Reminders </p> </li> <li> <p>If an admin sends you a reminder, you\u2019ll either:  </p> <ul> <li>Get an email (if SMTP is configured), or  </li> <li>See an in-app alert (if they used the ReminderSection page).</li> </ul> </li> <li> <p>Log Out </p> </li> <li>Click Log Out in the Navbar \u2192 back to <code>/auth</code>.</li> </ol>"},{"location":"installation-setup/","title":"4. Installation &amp; Setup","text":""},{"location":"installation-setup/#41-unzip-project-structure","title":"4.1. Unzip &amp; Project Structure","text":"<ol> <li>Download the <code>src1.zip</code> file.  </li> <li>Unzip it to a folder named <code>step-by-step-app</code> (or any preferred name).  </li> <li>At the top level of <code>step-by-step-app/</code>, you should see:</li> </ol>"},{"location":"overview/","title":"1. Overview","text":"<p>Step by Step App is a React-TypeScript application backed by Supabase. Its primary purpose is to let \u201cowners\u201d (admins) define multi-step processes\u2014each process comprised of one or more steps, each step potentially having its own custom form or questionnaire. Then, \u201cdoers\u201d (end users) can view the steps assigned to them, fill out forms, and submit responses. The app also integrates with Google Forms (syncing responses automatically), and provides reporting, and reminders features.</p> <p>At a high level:</p> <ul> <li>Owners/Admins create Processes \u2192 define Steps \u2192 attach custom Forms or Google Forms to Steps. They can monitor progress and view reports.  </li> <li>Doers/Contributors see only the steps assigned to them, fill out those form(s), and submit. They can track their tasks (Pending, InProgress, and Completed).  </li> <li>Reminders allow the admin to reassign.  </li> <li>Reporting aggregates step-level and process-level completion data.</li> </ul>"},{"location":"pages-workflow/","title":"How Each Page Works","text":""},{"location":"pages-workflow/#4-how-each-page-works","title":"4. How Each Page Works","text":"<p>Below is a breakdown of each page/component, what it does, and how it interacts with Supabase or Google Forms.</p>"},{"location":"pages-workflow/#41-process-management","title":"4.1. Process Management","text":""},{"location":"pages-workflow/#411-addprocess-srcpagesaddprocesstsx","title":"4.1.1. AddProcess (<code>src/pages/AddProcess.tsx</code>)","text":"<ul> <li>Purpose: Create a new Process using either a Google Form or a Crafty Form, and save the associated form metadata to the database.</li> <li>Inputs:</li> <li>Process Name  </li> <li>Editor Emails (comma-separated)  </li> <li>Form Type (Google Form / Crafty Form)  </li> <li>Shared Form Link (Crafty only)</li> <li>Flow:</li> <li>User selects the form type (Google or Crafty).</li> <li>On \u201cSave,\u201d check for a valid user session via Supabase Auth.</li> <li>Insert a new record into the <code>processes</code> table with <code>name</code> and <code>user_id</code>.</li> <li>If form type is Google:<ul> <li>Call Netlify function to create a Google Form (requires <code>googleToken</code>).</li> <li>Insert <code>google_form_id</code> and <code>google_form_url</code> into the <code>forms</code> table.</li> <li>Open the Google Form editor in a new tab.</li> </ul> </li> <li>If form type is Crafty:<ul> <li>Open Crafty Form builder in a new tab.</li> <li>Wait for user to input the shared form link.</li> <li>Insert the form URL into the <code>forms</code> table.</li> </ul> </li> <li>Redirect to <code>/process/:id/steps</code> after form association is complete.</li> </ul>"},{"location":"pages-workflow/#42-step-management","title":"4.2. Step Management","text":""},{"location":"pages-workflow/#421-addstep-srcpagesaddsteptsx","title":"4.2.1. AddStep (<code>src/pages/AddStep.tsx</code>)","text":"<ul> <li> <p>Purpose:   This page lets you add a new Step to a Process or edit an existing Step. You choose one of three types\u2014Status, Checklist, or Crafty Form\u2014then fill in details like who is responsible, how long it should take, any dependencies, and whether to send alerts or reminders. If needed, you can also branch off into another Process based on a chosen status.</p> </li> <li> <p>Inputs: </p> </li> <li> <p>URL Parameters &amp; Query Strings: </p> <ul> <li><code>flowchartId</code>: which Process this Step belongs to.  </li> <li><code>mode</code>: either <code>add</code> (to create a new Step) or <code>edit</code> (to change an existing one).  </li> <li>When <code>mode=edit</code>, you also see <code>stepId</code> and <code>sequenceId</code> so the form knows which Step to load.</li> </ul> </li> <li> <p>Basic Step Details: </p> <ul> <li>Step Name (text): the name of this Step.  </li> <li>Responsibility (text): who is responsible for completing it.  </li> <li>TAT (Turnaround Time) </li> <li>A number field (e.g., \u201c3\u201d) and a dropdown for the unit (minutes, hours, days, or weeks).  </li> <li>Dependency (optional text): if this Step waits for another Step, enter that here.  </li> <li>Step ID &amp; Sequence ID (read-only): automatically assigned when adding, or prefilled when editing.  </li> <li>Step Type (dropdown): pick one of three types\u2014<code>status</code>, <code>checklist</code>, or <code>crafty</code>.</li> </ul> </li> <li> <p>Start Timing: </p> <ul> <li>Immediate: Step starts as soon as you save.  </li> <li>Scheduled: choose a date &amp; time when the Step should begin.  </li> <li>If you select \u201cScheduled,\u201d a date/time picker appears for you to pick exactly when.</li> </ul> </li> <li> <p>Status Step Configuration (only if you picked Status):  </p> <ul> <li>Input Type (dropdown): choose how users will select a status\u2014dropdown menu, radio buttons, or clickable buttons.  </li> <li>Statuses List: add as many status options as you want (for example, \u201cApproved,\u201d \u201cRejected,\u201d \u201cNeeds Review\u201d). For each:  </li> <li>Option Name (text)  </li> <li>Action (dropdown): choose what happens when someone picks this status:  <ul> <li>Next Step: automatically move to the next Step.  </li> <li>Stop Here: end the workflow at this status.  </li> <li>Split/Progress: branch into another Process. If you choose \u201cSplit/Progress,\u201d two new dropdowns appear:  </li> <li>Pick a Process to branch into (populated with all your Processes).  </li> <li>Pick a Step inside that Process.    Once both are chosen, you\u2019ll see something like \u201cStep: [Step Name] in [Process Name]\u201d to confirm.  </li> </ul> </li> <li>Click + Add Status to add another status option.</li> </ul> </li> <li> <p>Checklist Step Configuration (only if you picked Checklist):  </p> <ul> <li>Checklist Items: list each item that must be checked off (for example, \u201cGather Documents,\u201d \u201cSign Form\u201d). Each item has a text box; press Enter to add another blank item.  </li> <li>On Complete Action (dropdown): choose what happens when all items are checked:  </li> <li>Next Step (move on)  </li> <li>Stop Here (end workflow)  </li> <li>Split/Progress (branch into another Process)</li> </ul> </li> <li> <p>Crafty Form Configuration (only if you picked Crafty):  </p> <ul> <li>Open Crafty Builder: a button that opens an external form-building tool in a new tab.  </li> <li>Form URL (text): paste the link to the form you built.  </li> <li>On Submit Action (dropdown): choose what happens after someone submits that form:  </li> <li>Next Step (move on)  </li> <li>Stop Here (end workflow)  </li> <li>Split/Progress (branch into another Process) </li> </ul> </li> <li> <p>Alerts &amp; Reminders (always visible):  </p> <ul> <li>Alerts: you can add one or more alerts\u2014each alert lets you choose the type (e.g., email or SMS), who it goes to, and when.  </li> <li>Reminders: you can add one or more reminders\u2014each reminder lets you set how often to remind (e.g., \u201cdaily until done\u201d) and who gets it.</li> </ul> </li> <li> <p>Flow (What Happens When You Open &amp; Save This Page): </p> </li> <li> <p>On Page Load: </p> <ul> <li>If <code>mode=add</code>, the app fetches all existing Steps in this Process to figure out the next available Step ID and Sequence ID automatically.  </li> <li>If <code>mode=edit</code>, the app loads that Step\u2019s existing data (name, TAT, dependencies, statuses, checklist items, form URL, etc.) so all fields are pre-filled.</li> </ul> </li> <li> <p>Fetch All Processes: </p> <ul> <li>Right after loading, the app checks your login (via Supabase Auth).  </li> <li>It then fetches all your Processes (and their Steps) so you can use them if you choose \u201cSplit/Progress\u201d for any status.</li> </ul> </li> <li> <p>Keep Status Input Type in Sync: </p> <ul> <li>If you change the global Input Type (dropdown, radio, or button), all existing status options immediately update to use that same style.</li> </ul> </li> <li> <p>User Fills In &amp; Edits Fields: </p> <ul> <li>Enter Step Name, Responsibility, TAT, Dependency, and see the read-only Step ID/Sequence ID.  </li> <li>Choose a Step Type\u2014Status, Checklist, or Crafty\u2014and configure that panel:  </li> <li>For Status, add options and pick actions (Next, Stop, or Split). If you pick Split, choose a Process and a Step from that Process.  </li> <li>For Checklist, type each checklist item and press Enter to add more. Then pick what happens when all items are done.  </li> <li>For Crafty, click \u201cOpen Crafty Builder,\u201d paste your form link, and pick what happens after someone submits.  </li> <li>Always fill in any Alerts and Reminders you want to send.</li> </ul> </li> <li> <p>Click \u201cSave Step\u201d or \u201cSave as Draft\u201d: </p> <ul> <li>The app checks if you\u2019re still logged in. If not, it shows an alert and stops.  </li> <li>It builds a data object (payload) containing:  </li> <li>Process ID, Step ID, Sequence ID, Step Name, TAT value &amp; unit, dependencies, responsibility, and a flag for \u201cis draft.\u201d  </li> <li>Your user ID, Step Type, and timestamps for \u201cstarted_at\u201d (if Immediate) or \u201cscheduled_at\u201d (if Scheduled).  </li> <li>If you chose Status, all statuses (including any Next Step or Split details).  </li> <li>If you chose Checklist, all checklist items and the \u201cOn Complete\u201d action.  </li> <li>If you chose Crafty, the form URL and \u201cOn Submit\u201d action.  </li> <li>All Alerts and Reminders settings.  </li> <li>If you\u2019re editing, it calls Supabase\u2019s <code>update</code> on the existing row in the <code>steps</code> table. On success, you see \u201cStep updated successfully!\u201d  </li> <li>If you\u2019re adding, it calls Supabase\u2019s <code>insert</code> to create a new row in <code>steps</code>. On success, you see \u201cStep created successfully!\u201d  </li> <li>Any Supabase error shows an alert with the error message.</li> </ul> </li> <li> <p>Return to Previous Page: </p> <ul> <li>After a successful save or update, the app calls <code>navigate(-1)</code> to go back to the list of Steps (or wherever you came from).</li> </ul> </li> <li> <p>Helper Function (Time in IST): </p> </li> <li>The function <code>getISTTimestamp()</code> takes either the current time or a chosen date/time, converts it to India Standard Time (+5:30), then formats it as <code>YYYY-MM-DD HH:mm:ss</code>. This is used for the \u201cstarted_at\u201d or \u201cscheduled_at\u201d timestamps when saving the Step.</li> </ul>"},{"location":"pages-workflow/#422-stepcreation-srcpagesstepcreationtsx","title":"4.2.2. StepCreation (<code>src/pages/StepCreation.tsx</code>)","text":"<ul> <li>Purpose: List &amp; manage all Steps for a Process.</li> <li>Features:</li> <li>Shows all <code>StepCard</code> components (sortable by due date)</li> <li>Buttons: \u201cAdd Step,\u201d \u201cBulk Edit,\u201d</li> <li>Clicking a <code>StepCard</code> \u2192 edit that Step</li> </ul>"},{"location":"pages-workflow/#423-bulkaddflowchart-srcpagesbulkaddflowcharttsx","title":"4.2.3. BulkAddFlowchart (<code>src/pages/BulkAddFlowchart.tsx</code>)","text":"<ul> <li>Purpose: Display all Steps in a Process at once and allow adding, editing, or deleting them in bulk. New Steps can be added either \u201cparallel\u201d (same sequence, new ID) or \u201cbelow\u201d (both ID and sequence increment).</li> <li>Features:</li> <li>Fetch and list existing Steps (showing Step ID, Sequence ID, TAT, name, and responsibility).</li> <li>Add a new parallel Step beside an existing one (same sequenceId, stepId + 1).</li> <li>Add a new sequential Step below an existing one (sequenceId + 1, stepId + 1).</li> <li>Edit any existing Step by navigating to the Add/Edit Step form with prefilled values.</li> <li>Delete existing Steps (prompts confirmation, then removes from Supabase).</li> <li>\u201cSave All\u201d button to batch-insert only newly added Steps (re-sequence them before inserting).</li> <li>\u201cCancel\u201d button to return without saving changes.  </li> </ul>"},{"location":"pages-workflow/#43-doer-end-user-workflow","title":"4.3. Doer (End-User) Workflow","text":""},{"location":"pages-workflow/#431-doersteplist-srcpagesdoerdoersteplisttsx","title":"4.3.1. DoerStepList (<code>src/pages/doer/DoerStepList.tsx</code>)","text":"<ul> <li> <p>Purpose:   Show all Steps assigned to the logged-in Doer, combining each Step with any form submissions. Allows searching, filtering, sorting, grouping, and basic actions like deleting or escalating a Step, sending an email/message, and navigating to a detailed view.</p> </li> <li> <p>Features: </p> </li> <li>Fetches all active (not completed) Steps for the current user and any related form submissions, merging them into \u201cvirtual items.\u201d  </li> <li>Real-time subscription (via Supabase) to new Steps so the list updates automatically when someone inserts a new Step that belongs to the user.  </li> <li>Search Box: filter the list by typing part of the Step\u2019s name.  </li> <li>Filter Menu: <ul> <li>\u201cAll Steps\u201d (no filter)  </li> <li>\u201cTAT &lt; 10 hrs\u201d  </li> <li>\u201cTAT \u2265 10 hrs\u201d  </li> </ul> </li> <li>Sort Menu: <ul> <li>\u201cNo Sort\u201d  </li> <li>\u201cTAT Ascending\u201d  </li> <li>\u201cTAT Descending\u201d  </li> <li>\u201cSequence Ascending\u201d  </li> <li>\u201cSequence Descending\u201d  </li> </ul> </li> <li>Group Menu: <ul> <li>\u201cNone\u201d (show items in one list)  </li> <li>\u201cProcess\u201d (group by process name, with collapsible headers)  </li> <li>\u201cData Points\u201d (group by sequence_id, with collapsible headers)  </li> </ul> </li> <li>Three-Dot Menu on Each Card: <ul> <li>Delete: remove either the Step (if there\u2019s no submission) or the submission record. Shows a confirmation if deleting an existing Step.  </li> </ul> </li> <li>Escalate Action: set a Step\u2019s <code>is_escalated</code> flag to true, with a popup alert on success.  </li> <li>Email/Message Modal: a pop-up form to enter a \u201cTo\u201d address and message body, then send via a POST request to an external endpoint.  </li> <li>Clicking a Card: navigates to <code>/doer/step/{stepId}/submission/{submissionId}</code> for a detailed view.  </li> <li>Dropdowns Close When Clicking Outside: each of the Filter, Sort, and Group menus closes if you click anywhere else on the page.  </li> <li>Bottom-Right Icons (Optional): two floating buttons for quick access (e.g., a chat button and a help button).  </li> </ul>"},{"location":"pages-workflow/#432-doerstepdetail-srcpagesdoerdoerstepdetailtsx","title":"4.3.2. DoerStepDetail (<code>src/pages/doer/DoerStepDetail.tsx</code>)","text":"<ul> <li>Purpose: Let the Doer fill out the Step\u2019s form (custom or Google Form).</li> <li>Flow:</li> <li>Given <code>stepId</code>, fetch step metadata (title, description, due date).</li> <li>If <code>form_schema_id</code> exists: render <code>FormSchemaRenderer</code> with that schema.</li> <li>Else if <code>google_form_url</code> exists: embed the Google Form via iframe.</li> <li>On form submission:<ul> <li>Collect answers \u2192 insert into <code>form_responses</code>.</li> <li>Update the Step\u2019s <code>status</code> to <code>completed</code>.</li> <li>Redirect to <code>DoerSubmissionDetail</code>.</li> </ul> </li> </ul>"},{"location":"pages-workflow/#433-doersubmissiondetail-srcpagesdoerdoersubmissiondetailtsx","title":"4.3.3. DoerSubmissionDetail (<code>src/pages/doer/DoerSubmissionDetail.tsx</code>)","text":"<ul> <li>Purpose: Display a read-only view of the Doer\u2019s submitted answers.</li> <li>Flow:</li> <li>Given <code>submissionId</code>, fetch response data from <code>form_responses</code>.</li> <li>Iterate over each question + answer \u2192 render on screen.</li> <li>Show timestamp and any admin feedback (if implemented).</li> </ul>"},{"location":"pages-workflow/#44-report-page","title":"4.4. Report Page","text":""},{"location":"pages-workflow/#441-reportpage-srcpagesreportpagetsx","title":"4.4.1. ReportPage (<code>src/pages/ReportPage.tsx</code>)","text":"<ul> <li> <p>Purpose:   Provide a visual report of all Processes and their Steps, showing progress, durations, and statuses. Offers two main views\u2014by Process (timeline format) and by Step (flat list)\u2014and allows sorting, expanding/collapsing, and quick navigation from a step to its parent process.</p> </li> <li> <p>Features: </p> </li> <li>Data Fetching: <ul> <li>Retrieves all Processes for the current user, including each Process\u2019s Steps and any form submissions.  </li> <li>Loads real-time data in IST without timezone conversion errors (using <code>parseLocalDate</code> and <code>formatIST</code>).  </li> </ul> </li> <li>Two View Modes: <ol> <li>By Process (Timeline): </li> <li>Displays each Process as a timeline entry with:  <ul> <li>Date Cell: shows the earliest start time among its Steps (with a clock icon).  </li> <li>Progress Card: </li> <li>Process name, a collapse/expand button (chevrons)  </li> <li>Three tags showing total Steps, total data points (form submissions), and total TAT (in hours).  </li> <li>A horizontal progress bar indicating % of Steps completed.  </li> <li>When expanded, a list of all Steps for that Process, each with:  <ul> <li>A colored \u201cstatus pill\u201d (Pending/In Progress/Completed).  </li> <li>Start time (formatted) or \u201c\u2014\u201d if not started.  </li> <li>Duration (\u201cXh Ym\u201d) from start to completion or to now.  </li> <li>Overdue indicator if duration exceeds TAT (\u201c\u2022 Overdue Xh Ym\u201d).  </li> </ul> </li> </ul> </li> <li>By Step (Flat List): </li> <li>Flattens all Steps across all Processes into one list.  </li> <li>Each Step item shows:  <ul> <li>\u201cProcessName: StepName\u201d (bold), a status pill, and an arrow button to scroll the timeline view to that Process.  </li> <li>Status sequence (if any), e.g., \u201cApproved \u2192 Completed\u201d or \u201cNo statuses.\u201d  </li> <li>Start time (or \u201c\u2014\u201d) and duration/overdue info.  </li> </ul> </li> </ol> </li> <li>Sorting Controls: <ul> <li>Toggle between \u201cOldest first\u201d and \u201cNewest first\u201d for Processes. Affects both data fetch order and the timeline.  </li> </ul> </li> <li>Expand/Collapse State: <ul> <li>Tracks which Process cards are expanded (via a <code>Set&lt;string&gt;</code>).  </li> <li>Clicking the chevron toggles showing/hiding that Process\u2019s Steps.  </li> </ul> </li> <li>Smooth Scrolling: <ul> <li>When in Step view, clicking the arrow next to a Step scrolls the Process view into center focus (by setting <code>focusProcess</code> and using <code>ref.scrollIntoView</code>).  </li> </ul> </li> <li>Status Pill Rendering: <ul> <li>For each Step, determines its status:  </li> <li>Completed (if <code>completed_at</code> is set)  </li> <li>In Progress (if <code>started_at</code> set but not completed)  </li> <li>Pending (otherwise)  </li> <li>Chooses pill background/foreground colors via <code>statusColors()</code>.  </li> </ul> </li> <li>Duration &amp; Overdue Calculation: <ul> <li>Converts TAT units (<code>mins</code>, <code>hrs</code>, <code>days</code>, <code>weeks</code>) to hours using <code>toHours()</code>.  </li> <li>Computes actual time difference between <code>started_at</code> and <code>completed_at</code> (or now) in milliseconds, then formats as \u201cXh Ym\u201d via <code>formatDuration()</code>.  </li> <li>Shows \u201c\u2022 Overdue Xh Ym\u201d if actual duration exceeds expected TAT.  </li> </ul> </li> <li>Collapsible Process Entries: <ul> <li>Each Process entry has a vertical timeline line, a date cell, and a card.  </li> <li>Inside the card, shows tags, progress bar, and optionally the Step list when expanded.  </li> </ul> </li> <li>Inline Styles &amp; Icons: <ul> <li>Uses React Icons (Clock, Chevron, ArrowRight) for visual cues.  </li> <li>Inline <code>styles</code> object defines layout, typography, colors, tags, buttons, progress bar, and step list styles.  </li> </ul> </li> <li>Loading State: <ul> <li>While data is fetching, displays \u201cLoading\u2026\u201d.  </li> </ul> </li> <li>Responsive Behavior: <ul> <li>Scrolls to a Process card when <code>focusProcess</code> changes.  </li> <li>Ensures the UI remains consistent whether viewing by Process or by Step.  </li> </ul> </li> </ul>"},{"location":"prerequisites/","title":"3. Prerequisites","text":"<p>Before installing and running Step by Step App, make sure you have:</p> <ol> <li>Node.js (LTS version recommended, e.g., v18 or higher)  </li> <li>npm (comes bundled with Node.js) or Yarn </li> <li>Supabase Account (to create a free project, get the URL &amp; anon key)  </li> <li>Google Account (for Google Forms integration)  </li> <li>[Optional] A Google Cloud project with the Google Forms API enabled if you intend to automate syncing via a backend.</li> </ol>"},{"location":"running/","title":"Running","text":""},{"location":"running/#36-create-docsrunningmd","title":"3.6. Create <code>docs/running.md</code>","text":"<p>```markdown</p>"},{"location":"running/#5-running-the-application","title":"5. Running the Application","text":"<p>Once Supabase (and optionally Google Forms) are configured:</p> <p>```bash npm start</p>"},{"location":"running/#or","title":"or","text":"<p>yarn start</p>"},{"location":"styling-assets/","title":"7. Styling &amp; Static Assets","text":"<ul> <li>Global Styles: </li> <li> <p><code>src/index.css</code> and <code>src/App.css</code> contain global CSS (fonts, colors, spacing). Edit here to adjust site-wide styles.</p> </li> <li> <p>Page-Specific Styles: </p> </li> <li>e.g. <code>src/pages/styles/ProcessList.css</code> holds styles just for <code>ProcessList.tsx</code>.  </li> <li> <p>To add a new CSS file, place it in <code>src/pages/styles/</code> and import it at the top of the corresponding <code>.tsx</code>.</p> </li> <li> <p>Images &amp; Logos: </p> </li> <li> <p><code>src/logo.svg</code> is the default React logo. Swap it out with your own <code>logo.svg</code> in <code>/src</code> to change the app\u2019s logo.</p> </li> <li> <p>Public Assets (<code>public/</code>): </p> </li> <li><code>favicon.ico</code>, <code>index.html</code>, and any static images should live under <code>public/</code>.  </li> <li>If you want a custom favicon, replace <code>public/favicon.ico</code> with your own.</li> </ul>"},{"location":"supabase-schema/","title":"5. Supabase Schema &amp; Client","text":"<p>Below is a suggested table structure. Create these tables in Supabase (SQL Editor) or via migration scripts. The React front-end assumes these tables exist:</p>"},{"location":"supabase-schema/#table-users","title":"Table: <code>users</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>email</code> (text)</li> <li><code>full_name</code> (text)</li> <li><code>role</code> (enum: <code>'owner' | 'doer'</code>)</li> <li><code>created_at</code> (timestamp, default <code>now()</code>)</li> <li><code>updated_at</code> (timestamp, default <code>now()</code>)</li> </ul>"},{"location":"supabase-schema/#table-processes","title":"Table: <code>processes</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>title</code> (text)</li> <li><code>description</code> (text)</li> <li><code>owner_id</code> (UUID, references <code>users.id</code>)</li> <li><code>created_at</code> (timestamp, default <code>now()</code>)</li> <li><code>updated_at</code> (timestamp, default <code>now()</code>)</li> </ul>"},{"location":"supabase-schema/#table-steps","title":"Table: <code>steps</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>process_id</code> (UUID, references <code>processes.id</code>)</li> <li><code>title</code> (text)</li> <li><code>description</code> (text)</li> <li><code>due_date</code> (date)</li> <li><code>doer_id</code> (UUID, references <code>users.id</code>)</li> <li><code>form_schema_id</code> (UUID, references <code>form_schemas.id</code>, nullable)</li> <li><code>google_form_url</code> (text, nullable)</li> <li><code>status</code> (enum: <code>'pending' | 'completed' | 'overdue'</code>)</li> <li><code>created_at</code> (timestamp, default <code>now()</code>)</li> <li><code>updated_at</code> (timestamp, default <code>now()</code>)</li> </ul>"},{"location":"supabase-schema/#table-form_schemas","title":"Table: <code>form_schemas</code>","text":"<ul> <li><code>id</code> (UUID, primary key)</li> <li><code>name</code> (text)</li> <li><code>description</code> (text)</li> <li><code>schema</code> (JSONB)   e.g.   ```json   [     { \"fieldLabel\": \"Name\", \"type\": \"text\", \"required\": true },     { \"fieldLabel\": \"Age\",  \"type\": \"number\", \"required\": false }   ]</li> </ul>"},{"location":"troubleshooting-faq/","title":"8. Troubleshooting &amp; FAQs","text":"<p>\u201cI see a white screen / blank page\u201d - Check the browser console for errors. - Verify you set Supabase URL and Anon Key correctly. - Ensure your Supabase tables match the schema (especially <code>processes</code>, <code>steps</code>, <code>form_schemas</code>, <code>form_responses</code>).</p> <p>\u201cAuthentication keeps redirecting me back to /auth\u201d - Confirm Supabase Auth is enabled and you have at least one user (email/password) in the Supabase Auth dashboard. - In <code>PrivateRoute.tsx</code>, make sure the session check (<code>supabase.auth.getUser()</code>) resolves correctly.</p> <p>\u201cGoogle Form sync doesn\u2019t fetch any responses\u201d - Verify your Google Form\u2019s \u201cAnyone with link can respond\u201d setting is enabled. - If using the Google Forms API backend:   - Ensure OAuth credentials are valid and the correct Form ID is used.   - Make sure your serverless function has the proper scopes (<code>https://www.googleapis.com/auth/forms.responses.readonly</code>).</p> <p>\u201cHow do I see all submissions across multiple forms?\u201d - Run a SQL query on Supabase:   ```sql   SELECT * FROM form_responses   ORDER BY submitted_at DESC;</p>"},{"location":"user-guide/","title":"6. How to Use (User Guide)","text":"<p>Below is a step-by-step guide, separated by user role.</p>"},{"location":"user-guide/#owneradmin-workflow","title":"Owner/Admin Workflow","text":"<ol> <li> <p>Sign Up / Log In </p> <ul> <li>First time: click Sign Up, complete registration, then log in.  </li> <li>Visit <code>https://ffms.netlify.app/</code>.  </li> <li>Returning users: log in directly.</li> </ul> </li> <li> <p>View Processes </p> <ul> <li>After login, you land on <code>/processes</code>.  </li> <li>If you have no processes yet, you\u2019ll see an empty state with an Add Process button.</li> </ul> </li> <li> <p>Create a Process </p> <ul> <li>Click Add Process \u2192 you see fields for:  </li> <li>Process Name (text)  </li> <li>Editor Emails (comma-separated, for any co-owners or editors)  </li> <li>Form Type (Buttons: Google Form or Crafty Form)  </li> <li>If you choose Google Form: clicking Save will trigger a backend call to create a new Google Form via your Netlify function (using your stored <code>googleToken</code>). Once created, the app saves <code>google_form_id</code> and <code>google_form_url</code> in the database, then opens the Google Form editor in a new tab.  </li> <li>If you choose Crafty Form: clicking Save opens the Crafty Form builder in a new tab. After you finish building, paste the shared form link back into the Crafty Form URL field. Then click Save again to store the <code>form_url</code> in Supabase.  </li> <li>After the form is associated (Google or Crafty), you\u2019re redirected to <code>/process/&lt;newProcessId&gt;/steps</code>.</li> </ul> </li> <li> <p>Open a Process </p> <ul> <li>Click any Process card \u2192 you go to <code>/process/&lt;processId&gt;/steps</code> (the StepCreation page).  </li> <li>If no steps exist yet, you\u2019ll see \u201cNo steps yet\u201d plus an Add Step button.</li> </ul> </li> <li> <p>Add a Single Step </p> <ul> <li>On <code>/process/&lt;processId&gt;/steps</code>, click Add Step \u2192 you arrive at the AddStep form.  </li> <li>Fill in:  </li> <li>Step Name &amp; Description (text fields)  </li> <li>Due Date (e.g., June 15, 2025)  </li> <li>Assign to Doer (dropdown; only users with role = doer appear)  </li> <li>(Optional) Google Form URL </li> <li>(Optional) Custom Form (if you have already built one under Forms)  </li> <li>Click Save. The new Step appears in the list.</li> </ul> </li> <li> <p>Bulk Edit / Reorder Steps </p> <ul> <li>If you have more than one Step, click Bulk Edit (in the top bar of StepCreation). That opens the BulkAddFlowchart page.  </li> <li>On BulkAddFlowchart, you see all existing Steps in a list with their Step ID, Sequence ID, TAT, name, and responsibility.  </li> <li>To add a parallel Step next to any existing one, click the small + icon on the right side of that Step\u2019s card. (Parallel means same sequenceId, stepId + 1.)  </li> <li>To add a sequential Step directly below any existing one, click the + button just beneath that Step. (Sequential means both stepId and sequenceId increment by 1.)  </li> <li>To edit an existing Step, click the three\u2010dot menu (\u22ee) on that Step and choose Edit\u2014this takes you to the AddStep form prefilled with that Step\u2019s data.  </li> <li>To delete an existing Step, click the three\u2010dot menu and choose Delete. You\u2019ll be prompted to confirm.  </li> <li>After adding as many new Steps as needed, click Save All at the top. This will batch\u2010insert only the newly added Steps (it automatically re\u2010sequences them before insertion).  </li> <li>Or click Cancel to return without saving.  </li> <li>After Save All, you return to <code>/process/&lt;processId&gt;/steps</code>, and the new Steps appear in the Step list.</li> </ul> </li> <li> <p>Send Reminders </p> <ul> <li>Visit Reminders (<code>/reminders</code>).  </li> <li>You\u2019ll see lists of Steps that are \u201cDue Soon\u201d or \u201cOverdue.\u201d  </li> <li>Click Send Reminder next to any Step \u2192 triggers an email or in-app reminder (depending on your Supabase SMTP setup).  </li> <li>You can also choose \u201cSend to All Overdue\u201d or \u201cSend to All Due Today\u201d to batch\u2010send.</li> </ul> </li> <li> <p>View Reports </p> <ul> <li>Visit Reports (<code>/report</code>). The ReportPage offers two main views:  </li> <li>By Process (Timeline Mode) <ul> <li>Shows each Process as a vertical timeline entry containing:  </li> <li>Date Cell: the earliest start time among that Process\u2019s Steps (with a clock icon).  </li> <li>Progress Card: <ul> <li>Process name and a collapse/expand chevron.  </li> <li>Three colored tags showing:  </li> <li>Total Steps (e.g., \u201c5 Steps\u201d)  </li> <li>Total Data Points (number of form submissions)  </li> <li>Total TAT (sum of all Steps\u2019 TAT, in hours)  </li> <li>A horizontal progress bar indicating the percentage of Steps completed (e.g., \u201c3 / 5 steps (60%)\u201d).  </li> <li>When expanded, an indented list of all Steps in that Process, each showing:  </li> <li>Status Pill (Pending, In Progress, or Completed\u2014with distinct background/foreground colors).  </li> <li>Start Time (formatted \u201cYYYY-MM-DD HH:mm:ss\u201d in IST) or \u201c\u2014\u201d if not started.  </li> <li>Duration (\u201cXh Ym\u201d) from <code>started_at</code> to <code>completed_at</code> or to now, and if overdue, \u201c\u2022 Overdue Xh Ym.\u201d  </li> </ul> </li> <li>Clicking the chevron toggles showing/hiding that Process\u2019s step list.  </li> </ul> </li> <li>By Step (List Mode) <ul> <li>Flattens every Step across all Processes into one scrollable list. Each Step item shows:  </li> <li>\u201cProcessName: StepName\u201d (bold), followed by a status pill.  </li> <li>An arrow button \u2192 clicking it switches back to the timeline view and scrolls that Process card into center.  </li> <li>Status Sequence (if defined), e.g. \u201cApproved \u2192 Completed,\u201d or \u201cNo statuses.\u201d  </li> <li>Start Time (or \u201c\u2014\u201d) and Duration/Overdue info.  </li> </ul> </li> <li>Sorting Controls (at top of the page): </li> <li>Two buttons: \u201cOldest first\u201d and \u201cNewest first.\u201d These toggle how the Processes (and their Steps) are ordered.  </li> <li>Loading State: while data is loading, you see \u201cLoading\u2026\u201d.  </li> <li>Use the toggle buttons above the timeline or list to switch between \u201cBy Process\u201d and \u201cBy Step\u201d modes.</li> </ul> </li> </ol>"},{"location":"user-guide/#doercontributor-workflow","title":"Doer/Contributor Workflow","text":"<ol> <li> <p>View Assigned Steps </p> <ul> <li>After login, go to <code>/doer/steps</code> (DoerStepList).  </li> <li>You\u2019ll see all active (pending or in-progress) Steps assigned to you. Each card shows Step name, TAT, and any existing status or data points.</li> </ul> </li> <li> <p>Search, Filter, Sort, and Group </p> <ul> <li>Search Box: type part of a Step name to filter the list.  </li> <li>Filter Menu (click the filter icon):  </li> <li>All Steps  </li> <li>TAT &lt; 10 hrs  </li> <li>TAT \u2265 10 hrs  </li> <li>Sort Menu (click the sort icon):  </li> <li>No Sort  </li> <li>TAT Ascending  </li> <li>TAT Descending  </li> <li>Sequence Ascending  </li> <li>Sequence Descending  </li> <li>Group Menu (click the group icon):  </li> <li>None (flat list)  </li> <li>Process (group cards under collapsible \u201cProcess: [Name]\u201d headers)  </li> <li>Data Points (group cards by sequence_id under \u201cSequence: [ID]\u201d headers)</li> </ul> </li> <li> <p>Open a Step </p> <ul> <li>Click on any Step card \u2192 you go to <code>/doer/step/&lt;stepId&gt;/submission/&lt;submissionId&gt;</code> (DoerStepDetail).  </li> <li>If the Step uses a Crafty Form, you\u2019ll see a form transposed view.  </li> <li>If the Step uses a Google Form, you\u2019ll see the form transposed view.</li> </ul> </li> <li> <p>Fill &amp; Submit </p> <ul> <li>Complete all required fields, then click Submit.  </li> <li>The app stores your answers in <code>form_responses</code> and updates the Step\u2019s status to <code>completed</code>.  </li> <li>You are redirected to <code>/doer/submission/&lt;submissionId&gt;</code> (DoerSubmissionDetail).</li> </ul> </li> <li> <p>View Submission Details </p> <ul> <li>On <code>/doer/submission/&lt;submissionId&gt;</code>, you see a read-only view of each question and your answers, with timestamps.  </li> <li>You cannot edit after submission\u2014this is strictly a detail view.</li> </ul> </li> <li> <p>Receive Reminders </p> <ul> <li>If an Admin sends you a reminder, you receive either:  </li> <li>An email (if SMTP is configured), or  </li> <li>An in-app alert (if the Admin used the ReminderSection).</li> </ul> </li> </ol>"}]}